// Declare Global Variables
let s;
let scl = 20;
let food;
let obstacles = [];
let playfield = 600;
let gameMode = "MainMenu";
let gameOver = false;
let gameOverTime = 0;
let finalScore = 0;

// 추가된 변수: 각 난이도별 설정
const easyModeSpeed = 10;
const normalModeSpeed = 15;
const hardModeSpeed = 20;
const normalModeObstacleCount = 10;
const hardModeObstacleCount = 20;

// p5js Setup function - required
function setup() {
  createCanvas(playfield, 640);
  background(51);
}

// p5js Draw function - required
function draw() {
  if (gameMode === "MainMenu") {
    displayMainMenu();
  } else {
    if (gameOver) {
      displayGameOver();
    } else {
      background(51);
      if (gameMode === "Easy") {
        frameRate(easyModeSpeed);
      } else if (gameMode === "Normal") {
        frameRate(normalModeSpeed);
      } else if (gameMode === "Hard") {
        frameRate(hardModeSpeed);
      }
      if (gameMode === "Normal" || gameMode === "Hard") {
        drawObstacles(); // 노말 모드와 하드 모드에만 장애물 그리기
      }
      scoreboard();
      if (s.eat(food)) {
        pickLocation();
      }
      s.death();
      s.update();
      s.show();
      fill(255, 0, 100);
      rect(food.x, food.y, scl, scl);
    }
  }
}

// Pick a location for food to appear
function pickLocation() {
  let cols = floor(playfield / scl);
  let rows = floor(playfield / scl);
  food = createVector(floor(random(cols)), floor(random(rows)));
  food.mult(scl);
  // Check the food isn't appearing inside the tail
  for (let i = 0; i < s.tail.length; i++) {
    let pos = s.tail[i];
    let d = dist(food.x, food.y, pos.x, pos.y);
    if (d < 1) {
      pickLocation();
    }
  }
}

// Generate random obstacles
function generateObstacles(count) {
  obstacles = [];
  for (let i = 0; i < count; i++) {
    let obstacle = createVector(
      floor(random(floor(playfield / scl))),
      floor(random(floor(playfield / scl)))
    );
    obstacle.mult(scl);
    obstacles.push(obstacle);
  }
}

// Draw obstacles
function drawObstacles() {
  fill(255);
  for (let i = 0; i < obstacles.length; i++) {
    rect(obstacles[i].x, obstacles[i].y, scl, scl);
  }
}

// scoreboard
function scoreboard() {
  fill(0);
  rect(0, 600, 600, 40);
  fill(255);
  textFont("Georgia");
  textSize(18);
  text("Score: ", 10, 625);
  text("Highscore: ", 450, 625);
  text(s.score, 70, 625);
  text(s.highscore, 540, 625);
}

// CONTROLS function
function keyPressed() {
  if (gameMode === "Easy" || gameMode === "Normal" || gameMode === "Hard") {
    if (keyCode === UP_ARROW) {
      s.dir(0, -1);
    } else if (keyCode === DOWN_ARROW) {
      s.dir(0, 1);
    } else if (keyCode === RIGHT_ARROW) {
      s.dir(1, 0);
    } else if (keyCode === LEFT_ARROW) {
      s.dir(-1, 0);
    }
  }
}

// SNAKE OBJECT
function Snake() {
  this.x = 0;
  this.y = 0;
  this.xspeed = 1;
  this.yspeed = 0;
  this.total = 0;
  this.tail = [];
  this.score = 1;
  this.highscore = 1;
  this.dir = function (x, y) {
    this.xspeed = x;
    this.yspeed = y;
  };
  this.eat = function (pos) {
    let d = dist(this.x, this.y, pos.x, pos.y);
    if (d < 1) {
      this.total++;
      this.score++;
      text(this.score, 70, 625);
      if (this.score > this.highscore) {
        this.highscore = this.score;
      }
      text(this.highscore, 540, 625);
      return true;
    } else {
      return false;
    }
  };
  this.death = function () {
    for (let i = 0; i < this.tail.length; i++) {
      let pos = this.tail[i];
      let d = dist(this.x, this.y, pos.x, pos.y);
      if (d < 1) {
        this.total = 0;
        finalScore = this.score;
        this.score = 0;
        this.tail = [];
        gameOver = true;
        gameOverTime = millis();
        return;
      }
    }
    // Check collision with obstacles
    if (gameMode === "Normal" || gameMode === "Hard") {
      for (let i = 0; i < obstacles.length; i++) {
        let d = dist(this.x, this.y, obstacles[i].x, obstacles[i].y);
        if (d < 1) {
          this.total = 0;
          finalScore = this.score;
          this.score = 0;
          this.tail = [];
          gameOver = true;
          gameOverTime = millis();
          return;
        }
      }
    }
  };
  this.update = function () {
    if (this.total === this.tail.length) {
      for (let i = 0; i < this.tail.length - 1; i++) {
        this.tail[i] = this.tail[i + 1];
      }
    }
    this.tail[this.total - 1] = createVector(this.x, this.y);
    this.x = this.x + this.xspeed * scl;
    this.y = this.y + this.yspeed * scl;
    this.x = constrain(this.x, 0, playfield - scl);
    this.y = constrain(this.y, 0, playfield - scl);
  };
  this.show = function () {
    fill(255);
    for (let i = 0; i < this.tail.length; i++) {
      rect(this.tail[i].x, this.tail[i].y, scl, scl);
    }
    rect(this.x, this.y, scl, scl);
  };
}

function displayMainMenu() {
  background(0);
  fill(255);
  textAlign(CENTER);
  textSize(36);
  text("Snake Game", width / 2, height / 2 - 50);
  textSize(24);
  text("1. Easy Mode", width / 2, height / 2);
  text("2. Normal Mode", width / 2, height / 2 + 30);
  text("3. Hard Mode", width / 2, height / 2 + 60);
  textSize(18);
  text("Click on the desired difficulty level", width / 2, height / 2 + 120);
}

function displayGameOver() {
  background(0);
  fill(255);
  textAlign(CENTER);
  textSize(36);
  text("Game Over", width / 2, height / 2 - 50);
  textSize(24);
  text("Score: " + finalScore, width / 2, height / 2);
  textSize(18);
  text("Returning to Main Menu...", width / 2, height / 2 + 50);
  if (millis() - gameOverTime > 3000) {
    gameMode = "MainMenu";
    gameOver = false;
  }
}

function mousePressed() {
  if (gameMode === "MainMenu") {
    if (
      mouseX > width / 2 - 100 &&
      mouseX < width / 2 + 100 &&
      mouseY > height / 2 - 10 &&
      mouseY < height / 2 + 10
    ) {
      gameMode = "Easy";
      initializeGame();
    } else if (
      mouseX > width / 2 - 100 &&
      mouseX < width / 2 + 100 &&
      mouseY > height / 2 + 30 - 10 &&
      mouseY < height / 2 + 30 + 10
    ) {
      gameMode = "Normal";
      initializeGame();
    } else if (
      mouseX > width / 2 - 100 &&
      mouseX < width / 2 + 100 &&
      mouseY > height / 2 + 60 - 10 &&
      mouseY < height / 2 + 60 + 10
    ) {
      gameMode = "Hard";
      initializeGame();
    }
  }
}

function initializeGame() {
  s = new Snake();
  pickLocation();
  if (gameMode === "Normal") {
    generateObstacles(normalModeObstacleCount);
  } else if (gameMode === "Hard") {
    generateObstacles(hardModeObstacleCount);
  }
}
